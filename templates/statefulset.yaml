apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "etcd.fullname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
spec:
  serviceName: {{ template "etcd.fullname" . }}
  replicas: {{ default 3 .Values.Replicas }}
  template:
    metadata:
      name: {{ template "etcd.fullname" . }}
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        component: "{{ .Release.Name }}-{{ .Values.Component }}"
    spec:
{{- if .Values.Affinity }}
      affinity:
{{ toYaml .Values.Affinity | indent 8 }}
{{- end }}
{{- if .Values.NodeSelector }}
      nodeSelector:
{{ toYaml .Values.NodeSelector | indent 8 }}
{{- end }}
{{- if .Values.Tolerations }}
      tolerations:
{{ toYaml .Values.Tolerations | indent 8 }}
{{- end }}
      volumes:
      - name: ca-volume
        persistentVolumeClaim:
          claimName: {{ template "etcd.fullname" . }}-certificates
      initContainers:
      - name: configurator-container
        image: gfleury/openssl-ca:latest
        imagePullPolicy: Always
        command: ['sh', '-c', 'export CA_PATH=/opt/ca && /root/opt/ca/scripts/common.sh && ${CA_PATH}/scripts/self_signed.sh && ${CA_PATH}/scripts/generate_certificate.sh ${SET_NAME}']
        volumeMounts:
        - name: ca-volume
          mountPath: /opt/ca
        env:
        - name: SET_NAME
          value: {{ template "etcd.fullname" . }}
      containers:
      - name: {{ template "etcd.fullname" . }}
        image: "{{ .Values.Image }}:{{ .Values.ImageTag }}"
        imagePullPolicy: "{{ .Values.ImagePullPolicy }}"
        ports:
        - containerPort: {{ .Values.PeerPort }}
          name: peer
        - containerPort: {{ .Values.ClientPort }}
          name: client
        resources:
          requests:
            cpu: "{{ .Values.Cpu }}"
            memory: "{{ .Values.Memory }}"
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: {{ default 3 .Values.Replicas | quote }}
        - name: SET_NAME
          value: {{ template "etcd.fullname" . }}
        {{- if .Values.root_password }}
        - name: ROOTPW
          value: {{ .Values.root_password }}
        {{- end }}
        volumeMounts:
        - name: datadir
          mountPath: /var/run/etcd
        - name: ca-volume
          mountPath: /opt/ca
        lifecycle:
          preStop:
            exec:
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  EPS=""
                  for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                      EPS="${EPS}${EPS:+,}https://${SET_NAME}-${i}.${SET_NAME}:2379"
                  done

                  HOSTNAME=$(hostname)

                  member_hash() {
                      etcdctl member list | grep https://${HOSTNAME}.${SET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1
                  }

                  echo "Removing ${HOSTNAME} from etcd cluster"

                  ETCDCTL_ENDPOINTS=${EPS} etcdctl member remove $(member_hash)
                  if [ $? -eq 0 ]; then
                      # Remove everything otherwise the cluster will no longer scale-up
                      rm -rf /var/run/etcd/*
                  fi
        command:
          - "/bin/sh"
          - "-ec"
          - |
            HOSTNAME=$(hostname)
            export ETCDCTL_API=3
            export ETCDCTL_INSECURE_DISCOVERY=true
            export ETCDCTL_INSECURE_SKIP_TLS_VERIFY=true
            export ETCDCTL_INSECURE_TRANSPORT=false
            _MY_IPADDR=$(/sbin/ifconfig | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | sort | awk '{print $1}')
            REQ_AUTH=""
            if [[ ! -z $ROOTPW ]]; then
              REQ_AUTH="--user root:$ROOTPW"
            fi
            # store member id into PVC for later member replacement
            collect_member() {
                while ! etcdctl member list &>/dev/null; do sleep 1; done
                etcdctl member list | grep https://${HOSTNAME}.${SET_NAME}:2380 | cut -d',' -f1  > /var/run/etcd/member_id
                exit 0
            }
            
            createroot() {
              sleep 60
              if [[ ! -z $ROOTPW ]]; then
                echo $ROOTPW | etcdctl user add root --interactive=false || true
                etcdctl auth enable || true
                echo {{ .Values.noopPassword }} | etcdctl --user root:$ROOTPW user add noop --interactive=false
                etcdctl --user root:$ROOTPW role add noop
                etcdctl --user root:$ROOTPW role grant-permission noop readwrite /{{ .Values.rootKey }} /{{ .Values.rootKey }}0
                etcdctl --user root:$ROOTPW user grant-role noop noop
              fi
            }
            
            eps() {
                EPS=""
                for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                    EPS="${EPS}${EPS:+,}https://${SET_NAME}-${i}.${SET_NAME}:2379"
                done
                echo ${EPS}
            }

            member_hash() {
                etcdctl member list | grep https://${HOSTNAME}.${SET_NAME}:2380 | cut -d',' -f1
            }

            # re-joining after failure?
            if [ -e /var/run/etcd/default.etcd ]; then
                echo "Re-joining etcd member"
                member_id=$(cat /var/run/etcd/member_id)

                # re-join member
                echo "Trying to join ${member_id} to the cluster"
                ETCDCTL_ENDPOINTS=$(eps) etcdctl ${REQ_AUTH} member update ${member_id} --peer-urls="https://${HOSTNAME}.${SET_NAME}:2380" || true
                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls https://${_MY_IPADDR}:2380 \
                    --listen-client-urls https://${_MY_IPADDR}:2379,https://127.0.0.1:2379 \
                    --advertise-client-urls https://${HOSTNAME}.${SET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd \
                    --enable-v2=false \
                    --peer-auto-tls \
                    --cert-file=/opt/ca/newcerts/${SET_NAME}.cert.pem --key-file=/opt/ca/private/${SET_NAME}.key
            fi

            # etcd-SET_ID
            SET_ID=${HOSTNAME:5:${#HOSTNAME}}

            # adding a new member to existing cluster (assuming all initial pods are available)
            if [ "${SET_ID}" -ge ${INITIAL_CLUSTER_SIZE} ]; then
                export ETCDCTL_ENDPOINTS=$(eps)

                # member already added?
                MEMBER_HASH=$(member_hash)
                if [ -n "${MEMBER_HASH}" ]; then
                    # the member hash exists but for some reason etcd failed
                    # as the datadir has not be created, we can remove the member
                    # and retrieve new hash
                    etcdctl member remove ${MEMBER_HASH}
                fi

                echo "Adding new member"
                etcdctl ${REQ_AUTH} member add ${HOSTNAME} https://${HOSTNAME}.${SET_NAME}:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs

                if [ $? -ne 0 ]; then
                    echo "Exiting"
                    rm -f /var/run/etcd/new_member_envs
                    exit 1
                fi

                cat /var/run/etcd/new_member_envs
                source /var/run/etcd/new_member_envs

                collect_member &

                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls https://${_MY_IPADDR}:2380 \
                    --listen-client-urls https://$${_MY_IPADDR}:2379,https://127.0.0.1:2379 \
                    --advertise-client-urls https://${HOSTNAME}.${SET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd \
                    --initial-advertise-peer-urls https://${HOSTNAME}.${SET_NAME}:2380 \
                    --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                    --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE} \
                    --enable-v2=false \
                    --peer-auto-tls \
                    --cert-file=/opt/ca/newcerts/${SET_NAME}.cert.pem --key-file=/opt/ca/private/${SET_NAME}.key
            fi

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${SET_NAME}-${i}.${SET_NAME} to come up"
                    ping -W 1 -c 1 ${SET_NAME}-${i}.${SET_NAME} > /dev/null && break
                    sleep 1s
                done
            done

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+,}${SET_NAME}-${i}=https://${SET_NAME}-${i}.${SET_NAME}:2380"
            done

            collect_member &

            # join member
            createroot &
            exec etcd --name ${HOSTNAME} \
                --initial-advertise-peer-urls https://${HOSTNAME}.${SET_NAME}:2380 \
                --listen-peer-urls https://${_MY_IPADDR}:2380 \
                --listen-client-urls https://${_MY_IPADDR}:2379,https://127.0.0.1:2379 \
                --advertise-client-urls https://${HOSTNAME}.${SET_NAME}:2379 \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster ${PEERS} \
                --initial-cluster-state new \
                --data-dir /var/run/etcd/default.etcd \
                --enable-v2=false \
                --peer-auto-tls \
                --cert-file=/opt/ca/newcerts/${SET_NAME}.cert.pem --key-file=/opt/ca/private/${SET_NAME}.key
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          # upstream recommended max is 700M
          storage: "{{ .Values.Storage }}"
    {{- if .Values.StorageClass }}
    {{- if (eq "-" .Values.StorageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.StorageClass }}"
    {{- end }}
    {{- end }}
